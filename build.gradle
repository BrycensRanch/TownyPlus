//file:noinspection SpellCheckingInspection
//file:noinspection GroovyAssignabilityCheck
import com.github.spotbugs.snom.SpotBugsTask
import org.gradle.crypto.checksum.Checksum
buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'com.github.johnrengelman.shadow'
    id 'net.minecrell.plugin-yml.bukkit'
    id "org.cadixdev.licenser"
//    id "com.github.sherter.google-java-format"
    id 'xyz.jpenilla.run-paper'
//    id "com.github.spotbugs"
    id 'com.gorylenko.gradle-git-properties'
//    id 'com.palantir.git-version'
    id "com.moonlitdoor.git-version"

    id 'name.remal.common-ci'
      id "com.github.spotbugs"
        id "com.diffplug.spotless"
    id "de.undercouch.download"



    id 'org.gradle.crypto.checksum'
    id 'java'
    id 'jacoco'
    id 'idea'
    id 'checkstyle'
    id 'signing'
}

// Thanks BanManager, but your log message is now my property
logger.lifecycle("""
*******************************************
 You are building ${rootProject.name}!
 If you encounter trouble:
 1) Try running 'build' in a separate Gradle run
 2) Use gradlew and not gradle
 3) If you still need help, ask on GitHub/Discord
 Output files will be in /build/libs
*******************************************
""")

apply from: "$rootDir/gradle/jacoco.gradle"
apply from: "$rootDir/gradle/publish.gradle"

if (project.hasProperty("local_script")) {
    apply from: file(local_script + "/build.local.gradle")
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

ext {
    mcVersion = project.property("mcVersion")
}

group project.property("group")
//def details = versionDetails()

spotbugs {
    ignoreFailures = true
    showStackTraces = true
    showProgress = true
    effort = "max"
    reportLevel = 'default'
}


// CI channels will clash if you change the version within build.gradle, this is only for local builds
gitProperties {
    failOnNoGitDirectory = false
    customProperty 'git.mcVersion', { project.property("mcVersion") }
    customProperty 'git.build.time', { new Date().getTime() }
    extProperty = 'gitProps' // git properties will be put in a map at project.ext.gitProps
}
generateGitProperties.outputs.upToDateWhen { false } // make sure the generateGitProperties task always executes (even when git.properties is not changed)


task downloadMultiplePlugins(type: Download) {
    println "Downloading dependent plugins..."
    src([
            'https://github.com/MilkBowl/Vault/releases/download/1.7.3/Vault.jar',
            // 'https://github.com/Aust1n46/VentureChat/releases/download/v3.5.0/VentureChat-3.5.0.jar',
            'https://github.com/TownyAdvanced/Towny/releases/download/0.99.0.4/towny-0.99.0.4.jar',
            'https://github.com/TownyAdvanced/TownyChat/releases/download/0.103/TownyChat-0.103.jar',
            'https://github.com/TheNewEconomy/TNE-Bukkit/releases/download/TNE-0.1.1.17-PRE-2/TNE-0.1.1.17-PRE-2.jar',
            'https://ci.dmulloy2.net/job/ProtocolLib/lastSuccessfulBuild/artifact/build/libs/ProtocolLib.jar',
            'https://github.com/DiscordSRV/DiscordSRV/releases/download/v1.26.2/DiscordSRV-Build-1.26.2.jar',
            'https://download.luckperms.net/1515/bukkit/loader/LuckPerms-Bukkit-5.4.102.jar',
            // its not a good idea to use lastSuccessfulBuild as it can break due to version numbers changing
            'https://ci.extendedclip.com/job/PlaceholderAPI/173/artifact/build/libs/PlaceholderAPI-2.11.3.jar',
            'https://github.com/ViaVersion/ViaVersion/releases/download/4.6.2/ViaVersion-4.6.2.jar',
            'https://github.com/ViaVersion/ViaBackwards/releases/download/4.6.1/ViaBackwards-4.6.1.jar',
    ])
    dest rootDir.relativePath(file('run/plugins'))
}
task downloadPlaceholderExtensions(type: Download) {
    println "Downloading Placeholder Extensions..."
    src([
            'https://api.extendedclip.com/media/PAPI-Expansion-Player_xY7OUz3.jar',
            'https://api.extendedclip.com/media/PAPI-Expansion-Vault_UL8mSu2.jar'
    ])
    dest rootDir.relativePath(file('run/plugins/PlaceholderAPI/expansions'))
}
tasks.downloadMultiplePlugins.dependsOn(tasks.downloadPlaceholderExtensions)
tasks.runServer.dependsOn(tasks.downloadMultiplePlugins)
tasks.runServer.doLast {
    println "(4) after  (run in execution phase as last statement)"
}

tasks.runServer.doFirst {
    println "(3) after  (run in execution phase as FORST statement - before doLast/<<)"
    println "As per the plugin license, agree to respect the license before using these plugins."
    println "What I mean by that is, don't redistribute them, don't claim them as your own, etc."
    println "If you don't agree, you can remove the plugins from the run/plugins folder."
}
ext {
    mcVersion = project.property("mcVersion")
}

// Automatically apply Java versioning conventions and have it comply with Semantic Versioning
// Our versioning scheme is: MAJOR.MINOR.PATCH-QUALIFIER
// MAJOR: Major changes to the plugin, such as a complete rewrite
// MINOR: Minor changes to the plugin, such as new features
// PATCH: Bug fixes
// QUALIFIER: A qualifier to the version, such as alpha, beta, or release candidate
// The version is governed from our CI server, and is automatically incremented.
// The CI should never run this.
if (System.getenv("CI") == null && project.property("DO_NOT_CHANGE_VERSION") != "true") {
    if (version == null || version == "") {
        version = "SNAPSHOT"
    } else if (gitBranchName.contains("alpha") || gitBranchName.contains("beta") || gitBranchName.contains("rc")) {
        version = version + "-SNAPSHOT"
    } else {
            version = version
    }
}
println("Version: " + version)
// The current version based on the most recent tag on the current git branch.
// Doesn't mean anything, just a nice to have.
println("Git Version: " + gitVersion)
println("Branch: " + gitBranchName)
println("Is CI detected? " + System.getenv("CI"))

task generateFiles {
  // Generates some files.
}

task createChecksums(type: Checksum, dependsOn: 'build') {
  inputFiles.setFrom(build)
  checksumAlgorithm.set(Checksum.Algorithm.SHA512)
  appendFileNameToChecksum.set(true)
}

checkstyle {
    // toolVersion '10.6.0'
    // maxWarnings = 0
}


tasks.withType(Checkstyle) {
    reports {
        xml.required = true
        html.required = true
    }
}

tasks.withType(SpotBugsTask) {
   reports {
       xml {
           required.set(true)
       }
       html {
           required.set(true)
       }
   }
}

def gitHubRepo = "https://github.com/BrycensRanch/TownyPlus"

bukkit {

    // Plugin main class (required)
    main = project.property("packageName") + ".TownyPlusMain"

    // API version (should be set for 1.13+)
    apiVersion = project.property("apiVersion")

    // Other possible properties from plugin.yml (optional)
    load = 'POSTWORLD' // or 'POSTWORLD'
    name = project.property("pluginName")
    description = project.property("description")
    depend = ['Towny']
    softDepend = ['DiscordSRV', 'TownyChat', 'VentureChat', 'ProtocolLib', 'PlaceholderAPI']
    defaultPermission = 'NOT_OP' // 'TRUE', 'FALSE', 'OP' or 'NOT_OP'
    website = gitHubRepo
//    commands {
//        test {
//            description = 'This is a test command!'
//            aliases = ['t']
//            permission = 'testplugin.test'
//            usage = 'Just run the command!'
//            // permissionMessage = 'You may not test this command!'
//        }
//        // ...
//    }

//    permissions {
//        'testplugin.*' {
//            children = ['testplugin.test'] // Defaults permissions to true
//            // You can also specify the values of the permissions
//            childrenMap = ['testplugin.test': false]
//        }
//        'testplugin.test' {
//            description = 'Allows you to run the test command'
//            setDefault('OP') // 'TRUE', 'FALSE', 'OP' or 'NOT_OP'
//        }
//    }
}

compileJava {
    options.fork = true
}
publish {
    dependsOn 'clean'
    dependsOn 'build'
    tasks.findByName('build').mustRunAfter 'clean'

}
assemble {
        dependsOn(shadowJar)
}
archivesBaseName = project.property("pluginName")

repositories {
    mavenLocal()
    mavenCentral()
    maven { url = 'https://jitpack.io' }
    maven {
        name = 'm2-dv8tion'
        url = 'https://m2.dv8tion.net/releases'
    }
    maven { url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    maven { url 'https://repo.papermc.io/repository/maven-public/' }
    maven { url = 'https://hub.jeff-media.com/nexus/repository/jeff-media-public/' }
    maven { url = 'https://libraries.minecraft.net/' }
    // This repo is a problem child
//    maven { url = 'https://repo.dmulloy2.net/repository/public/' }
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url = 'https://repo.spongepowered.org/maven/' }
    maven { url = 'https://nexus.scarsz.me/content/groups/public/' }
    maven { url = 'https://repo.glaremasters.me/repository/towny/'}
    maven { url = 'https://repo.alessiodp.com/releases/' }
    maven { url 'https://repo.extendedclip.com/content/repositories/placeholderapi/' }
}

dependencies {

    // Keep in mind: you can never have too many dependencies!
    // If you're using a dependency that isn't listed here, add it!

    // using spigot-api
    // notice how we arent using bukkit-api. i honestly think the plugin won't work with bukkit-api due to the shitload of opinionated dependencies we use
    compileOnly libs.spigot.api // The Spigot API with no shadowing. Requires the OSS repo.
    // or using paper-api
//    compileOnly "io.papermc.paper:paper-api:_"

    // Library dependencies mean they're loaded on server boot instead of being in the jar
    //

    // Spigot has inspired me to convert every dependency I use to dynamically load them from Maven Central.
    // I'm sorry.
    // Any dependencies that don't complain about being loaded dynamically shaded into the jar instead.
    // We went from 5MB to 1.4MB, so it's a win-win.

    // Command Handling! https://commandframework.cloud
    library libs.cloud.core
    library libs.cloud.annotations
    annotationProcessor(libs.cloud.annotations)
    library libs.cloud.paper
    library libs.cloud.minecraft.extras
    // Dependency for our way of command handling
    library libs.commodore

    library libs.lombok
    library libs.jackson.annotations
    library libs.jackson.databind
    // The following is required for the @Command annotation to work, probably...
    // I just got errors without it.
    library libs.geantyref
    annotationProcessor(libs.lombok)
    annotationProcessor(libs.jackson.annotations)
    library libs.jackson.dataformat.properties
    library libs.jackson.dataformat.yaml
    // For handling multi platform configuration, simply amazing
    // library "org.spongepowered:configurate-yaml:_"
    // Spigot/GitHub Releases Update checker. Am I that lazy? Yes.
    implementation libs.spigotupdatechecker
    implementation libs.libby.bukkit

    // Just a reminder: compileOnly means that we're not shading this dependency into our jar. This is usually when we're using a dependency that is already provided by the server. Aka, when it's already in the server's classpath.
    // implementation means that we're shading this dependency into our jar. This is usually when we're using a dependency that is not provided by the server. Aka, when it's not in the server's classpath.
    // Towny
    compileOnly libs.towny
    compileOnly libs.townychat

    // PlaceholderAPI
    compileOnly libs.placeholderapi

    // Towny's implementation of CommentedConfiguration, which we use for our config.yml and lang_en.yml
    implementation libs.commentedconfiguration

    // Inventory Framework we use for our GUIs /tplus chest
    compileOnly libs.if

    // Telemetry
    implementation libs.bstats.bukkit
    // better http server than spark
    library libs.javalin.bundle
    // DiscordSRV, optional dependency
    compileOnly libs.discordsrv

    // Semver version parsing for auto updating
    library libs.semver4j

//    // JDA for DiscordSRV
// Apparently, this is already included in DiscordSRV.
    compileOnly(libs.jda) {
        exclude module: 'opus-java'
    }
    // VentureChat support for chat listening
    compileOnly(libs.venturechat)
    // ProtocolLib (required by venturechat)
    compileOnly libs.protocollib
   compileOnly libs.spotbugs.annotations
//    library 'org.hibernate:hibernate-core:_'

    library libs.mcdiscordreserializer


    // Database stuff
    library libs.hikaricp
    library libs.h2
    library libs.sqlite.jdbc
    library libs.postgresql
//    compileOnly 'org.h2.Driver:Driver:_'
//    compileOnly 'com.mysql.jdbc.Driver:Driver:_'

    // Adventure
    library libs.adventure.api
    library libs.adventure.platform.bukkit
    library libs.adventure.text.minimessage
    // Adventure logger that takes advantage of Adventure's text components
    library libs.adventure.text.logger.slf4j

    // Test dependencies
   spotbugsPlugins libs.findsecbugs.plugin
//    testCompileOnly libs.spotbugs.annotations
//    testImplementation(libs.lombok)
//    testImplementation(libs.jackson.annotations)
//    testImplementation(libs.jackson.databind)
//    testImplementation(libs.javalin.bundle)
//    testImplementation Testing.junit.jupiter
//    testImplementation Testing.mockito.core
//    testImplementation 'com.github.seeseemelk:MockBukkit-v1.19:_'
//    testImplementation Testing.assertj.core
}
shadowJar {
        archiveClassifier.set("")
        dependencies {
        // These are sorted by internal dependencies to ones for compatability/functionatlity related to other plugins
        // include(dependency('net.kyori::'))
        include(dependency('org.bstats::'))
            include(dependency('net.byteflux::'))
            include(dependency('io.github.townyadvanced.commentedconfiguration::'))
            // include(dependency('com.zaxxer::'))
            // include(dependency('com.h2database::'))
        include(dependency('com.jeff_media::'))
//        include(dependency('me.lucko::'))
//        include(dependency('cloud.commandframework::'))
        // include(dependency('com.palmergames.bukkit::'))
        // include(dependency('com.discordsrv::'))
//        include(dependency('github.scarsz.discordsrv::'))
        // include(dependency('mineverse.aust1n46::'))
        // include(dependency('com.comphenix.protocol::'))
    }
    relocate 'com.jeff_media', "${packageName}.libs.jeff_media"
    relocate 'org.bstats', "${packageName}.libs.bstats"
    relocate 'io.github.townyadvanced.commentedconfiguration', "${packageName}.libs.commentedconfiguration"
    relocate 'com.github.stefvanschie.inventoryframework', "${packageName}.libs.inventoryframework"
    relocate 'net.byteflux', "${packageName}.libs.byteflux"
    // Exclude signatures, maven/ and proguard/ from META-INF
    exclude("META-INF/*.SF")
    exclude("META-INF/*.DSA")
    exclude("META-INF/*.RSA")
    exclude("META-INF/maven/**")
    exclude("META-INF/proguard/**")
}
license {
    include '**/*.java'

    matching('**/*.java') {
        header = file('HEADER.txt')
    }
}

sourcesJar.enabled = true;
tasks.build.dependsOn(shadowJar)
// tasks.test.dependsOn(shadowJar)

runServer {
    // Configure the Minecraft version for our task.
    // This is the only required configuration besides applying the plugin.
    // Your plugin's jar (or shadowJar if present) will be used automatically.
    minecraftVersion(project.property("testServerMCVersion"))
}
processResources {
    project.properties.put("version", version)
    expand project.properties
}

defaultTasks 'build'

name: Build
on: [ push ]
jobs:
  build:

    runs-on: ubuntu-latest
    # We want to run on external PRs, but not on our own internal PRs as they'll be run
    # by the push to the branch.
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository


    steps:
      - name: Check out current repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: 17
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1

      - name: Grant execute permission to gradlew
        run: chmod +x gradlew

      - name: SpotBugs üëÄ
        continue-on-error: true
        run: ./gradlew spotBugsMain

      - uses: jwgmeligmeyling/spotbugs-github-action@master
        continue-on-error: true
        with:
          path: 'build/reports/spotbugs/main.xml'
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Checkstyle üßë‚Äçüè´
        run: ./gradlew checkstyleMain
        continue-on-error: true
      - uses: jwgmeligmeyling/checkstyle-github-action@master
        continue-on-error: true
        with:
          path: 'build/reports/checkstyle/main.xml'


      - name: Build
        run: ./gradlew build -x test -x spotbugsMain -x spotbugsTest
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: "**/build/libs"

  test:

    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out current repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: 17
          
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Grant execute permission to gradlew
        run: chmod +x gradlew

      - name: Test
        run: ./gradlew test
        # I honestly detest Minecraft plugin unit testing and I don't think it's worth the time to write tests for a project like this. 
        # I'm not going to write tests for this project, but I will leave the code here in case you want to write tests for your own project.
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Create Coverage
        run: ./gradlew jacocoTestReport
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Upload CodeCov Report
        if: always()
        uses: codecov/codecov-action@v2
        continue-on-error: true
        with:
          file: "**/build/reports/jacoco/**/*.xml"

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1.40
        continue-on-error: true
        if: always()
        with:
          files: "**/build/test-results/**/*.xml"

  release:
    needs: [ build, test ]
    if: github.ref == 'master' || github.ref == 'beta' || github.ref == 'alpha' || github.ref == 'rc'

    runs-on: ubuntu-latest

    steps:
      - name: Check out current repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: 17

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2


      - name: Set up Node.js v16.x
        uses: actions/setup-node@v2
        with:
          node-version: "16.x"

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Grant execute permission for update-versions.sh
        run: chmod +x update-versions.sh

      - uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: build/libs
      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: true
          git_push_gpgsign: true
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GIT_AUTHOR_NAME: ${{ steps.import_gpg.outputs.name }}
          GIT_AUTHOR_EMAIL: ${{ steps.import_gpg.outputs.email }}
          GIT_COMMITTER_NAME: ${{ steps.import_gpg.outputs.name }}
          GIT_COMMITTER_EMAIL: ${{ steps.import_gpg.outputs.email }}
          GH_URL: "https://api.github.com/"
        run: npx --legacy-peer-deps -p @semantic-release/changelog -p @semantic-release/git -p @semantic-release/exec -p gradle-semantic-release-plugin -p @semantic-release/release-notes-generator -p semantic-release semantic-release
      - name: üîÉ Merge master back into alpha
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: everlytic/branch-merge@1.1.5
        with:
          github_token: ${{ secrets.GH_TOKEN }}
          source_ref: 'master'
          target_branch: 'alpha'
          commit_message_template: 'Merge branch {source_ref} into {target_branch} [skip ci]'
      - name: Publish to GitHub Package Registry
        if: ${{ github.ref == 'refs/heads/master' }}
        run: ./gradlew publish -x test -x spotbugsMain -x spotbugsTest
        env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
           signingKey: ${{ steps.import_gpg.outputs.fingerprint }}
           signingPassword: ${{ secrets.PASSPHRASE }}
      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts
          path: "**/build/libs"